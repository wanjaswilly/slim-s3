#!/usr/bin/env php
<?php

require __DIR__ . '/vendor/autoload.php';

$command = $argv[1] ?? null;
$name = $argv[2] ?? null;
$flags = array_slice($argv, 3); // gets everything after command + name
$makeMigration = in_array('-m', $flags);

// Required directories
$paths = [
    'routesFile'     => __DIR__ . '/routes/web.php',
    'templatesDir'   => __DIR__ . '/templates/pages',
    'partialsDir'    => __DIR__ . '/templates/partials',
    'controllerDir'  => __DIR__ . '/app/Controllers',
    'modelDir'       => __DIR__ . '/app/Models',
    'migrationsDir'  => __DIR__ . '/database/migrations',
];

// Ensure folders exist
foreach (['templatesDir', 'partialsDir', 'controllerDir', 'modelDir', 'migrationsDir'] as $dirKey) {
    if (!is_dir($paths[$dirKey])) {
        mkdir($paths[$dirKey], 0777, true);
    }
}

// Helper to check required package
function ensurePackageInstalled($class, $install)
{
    if (!class_exists($class)) {
        echo " Required package missing: $class\n";
        echo "    â†’ Install with: $install\n";
        exit(1);
    }
}

switch ($command) {
    case 'make:page':
        if (!$name) exit(" Page name required.\n");

        $routeLine = "\n// Route for '$name'\n"
            . "\$app->get('/$name', function (\$request, \$response) {\n"
            . "    \$view = \\Slim\\Views\\Twig::fromRequest(\$request);\n"
            . "    return \$view->render(\$response, \"pages/$name.twig\");\n"
            . "});\n";

        $contents = file_get_contents($paths['routesFile']);
        if (strpos($contents, "'/$name'") !== false) {
            echo "  Route for '$name' already exists.\n";
            exit;
        }

        file_put_contents($paths['routesFile'], $routeLine, FILE_APPEND);

        $templatePath = "{$paths['templatesDir']}/$name.twig";
        if (!file_exists($templatePath)) {
            file_put_contents($templatePath, "<h1>$name</h1>\n<p>This is the $name page.</p>");
            echo " Page '$name' created.\n";
        } else {
            echo "  Page template '$name.twig' already exists.\n";
        }
        break;

    case 'remove:page':
        if (!$name) exit(" Page name required.\n");

        $templatePath = "{$paths['templatesDir']}/$name.twig";
        if (file_exists($templatePath)) {
            unlink($templatePath);
            echo "  Removed template: $name.twig\n";
        } else {
            echo "  No template found for '$name'.\n";
        }

        $contents = file_get_contents($paths['routesFile']);
        $lines = explode("\n", $contents);
        $newLines = [];
        $skip = false;

        foreach ($lines as $line) {
            if (strpos($line, "'/$name'") !== false) $skip = true;
            if (!$skip) $newLines[] = $line;
            if ($skip && trim($line) === '});') $skip = false;
        }

        file_put_contents($paths['routesFile'], implode("\n", $newLines));
        echo " Route for '$name' removed.\n";
        break;

    case 'make:partial':
        if (!$name) exit(" Partial name required.\n");

        $path = "{$paths['partialsDir']}/$name.twig";
        if (!file_exists($path)) {
            file_put_contents($path, "<!-- $name partial -->\n");
            echo " Partial '$name.twig' created in partials/.\n";
        } else {
            echo "  Partial '$name.twig' already exists.\n";
        }
        break;

    case 'make:controller':
        if (!$name) exit(" Controller name required.\n");

        $className = ucfirst($name) . 'Controller';
        $path = "{$paths['controllerDir']}/$className.php";

        if (file_exists($path)) {
            echo "  Controller '$className' already exists.\n";
        } else {
            file_put_contents(
                $path,
                <<<PHP
<?php

namespace App\Controllers;

use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

class $className
{
    public function index(ServerRequestInterface \$request, ResponseInterface \$response): ResponseInterface
    {
        \$response->getBody()->write("Hello from $className");
        return \$response;
    }
}
PHP
            );
            echo " Controller '$className' created.\n";
        }
        break;

    case 'make:model':
        if (!$name) exit(" Model name required.\n");

        ensurePackageInstalled('Illuminate\\Database\\Eloquent\\Model', 'composer require illuminate/database');

        $className = ucfirst($name);
        $path = "{$paths['modelDir']}/$className.php";
        $tableName = strtolower($className) . 's'; // crude pluralization

        // Create model
        if (!file_exists($path)) {
            file_put_contents(
                $path,
                <<<PHP
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class $className extends Model
{
    protected \$table = '$tableName';
    // protected \$fillable = [];
}
PHP
            );
            echo " Model '$className' created.\n";
        } else {
            echo "  Model '$className' already exists.\n";
        }

        // If -m flag is present, generate matching migration
        if ($makeMigration) {
            ensurePackageInstalled('Illuminate\\Database\\Capsule\\Manager', 'composer require illuminate/database');

            $timestamp = date('Y_m_d_His');
            $migrationFile = "{$timestamp}_create_{$tableName}_table.php";
            $migrationPath = "{$paths['migrationsDir']}/$migrationFile";

            if (!file_exists($migrationPath)) {
                file_put_contents(
                    $migrationPath,
                    <<<PHP
<?php

use Illuminate\\Database\\Capsule\\Manager as Capsule;

class Create{$className}sTable
{
    public function up()
    {

        Capsule::schema()->create('$tableName', function (\$table) {
            \$table->id();
                        
            \$table->timestamps();
        });
    }

    public function down()
    {
        Capsule::schema()->dropIfExists('$tableName');
    }
}
PHP
                );
                echo " Migration for '$tableName' created: $migrationFile\n";
            } else {
                echo "  Migration already exists for '$tableName'.\n";
            }
        }

        break;

    case 'make:migration':
        if (!$name) exit(" Migration name required.\n");

        ensurePackageInstalled('Illuminate\\Database\\Capsule\\Manager', 'composer require illuminate/database');

        $className = ucfirst($name);
        $timestamp = date('Y_m_d_His');
        $filename = "{$timestamp}_{$name}.php";
        $path = "{$paths['migrationsDir']}/$filename";
        $tableName = strtolower($className) . 's'; // crude pluralization

        file_put_contents(
            $path,
            <<<PHP
<?php

use Illuminate\\Database\\Capsule\\Manager as Capsule;

class Create{$className}sTable
{
    public function up()
    {

        Capsule::schema()->create('$tableName', function (\$table) {
            \$table->id();
                        
            \$table->timestamps();
        });
    }

    public function down()
    {
        Capsule::schema()->dropIfExists('$tableName');
    }
}
PHP
        );
        echo " Migration '$filename' created.\n";
        break;

    case 'serve':
        echo " Running on http://localhost:8000\n";
        passthru('php -S localhost:8000 -t public');
        break;

    case 'make:factory':
        $name = $argv[2] ?? null;
        if (!$name) exit("Factory name required.\n");

        ensurePackageInstalled('Faker\Factory', 'composer require fakerphp/faker');

        $modelName   = ucfirst($name);
        $modelClass  = "App\\Models\\$modelName";

        // Check if model exists
        if (!class_exists($modelClass)) {
            exit("Model '$modelClass' not found. Create the model first using make:model.\n");
        }

        $className   = "{$modelName}Factory";
        $factoryPath = __DIR__ . "/database/factories/{$className}.php";

        // Ensure factories directory exists
        if (!is_dir(dirname($factoryPath))) {
            mkdir(dirname($factoryPath), 0777, true);
        }

        if (file_exists($factoryPath)) {
            echo "Factory '$className' already exists.\n";
            break;
        }

        // Generate factory file
        $factoryStub = <<<PHP
<?php

namespace Database\Factories;

use Faker\Factory as Faker;

class {$className}
{
    public static function make(): array
    {
        \$faker = Faker::create();

        return [
            // TODO: adjust fields to match your model
            'name' => \$faker->name,
            'email' => \$faker->unique()->safeEmail,
            'password' => password_hash('password', PASSWORD_DEFAULT),
            'role' => 'user',
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s'),
        ];
    }
}
PHP;

        file_put_contents($factoryPath, $factoryStub);
        echo "Factory '$className' created in database/factories/.\n";

        // Ensure seeders.php exists
        $seederFile = __DIR__ . '/database/seeders.php';
        if (!file_exists($seederFile)) {
            file_put_contents($seederFile, "<?php\n\nreturn [];\n");
        }

        // Load seeders
        $seeders = require $seederFile;

        // Add model entry if missing
        if (!isset($seeders[$modelName])) {
            $seeders[$modelName] = [
                'model' => $modelClass,
                'class' => "Database\\Factories\\$className",
                'file'  => $factoryPath,
            ];

            // Rewrite seeders.php with updated array
            $export = var_export($seeders, true);
            file_put_contents($seederFile, "<?php\n\nreturn $export;\n");
            echo "Seeder entry for '$modelName' added to database/seeders.php.\n";
        } else {
            echo "Seeder entry for '$modelName' already exists.\n";
        }

        break;


    case 'seed':
        $modelName = ucfirst($argv[2] ?? null);
        $count     = isset($argv[3]) ? (int)$argv[3] : 1;

        if (!$modelName) {
            exit("Usage: php slim seed <Model> [count]\n");
        }



        // Bootstrap Eloquent
        $dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
        $dotenv->safeLoad();
        $dbConfig = require __DIR__ . '/config/database.php';
        $capsule = new \Illuminate\Database\Capsule\Manager();
        $capsule->addConnection($dbConfig['connections'][$dbConfig['default']]);
        $capsule->setAsGlobal();
        $capsule->bootEloquent();

        $seedersFile = __DIR__ . '/database/seeders.php';
        if (!file_exists($seedersFile)) {
            exit("No seeders.php file found.\n");
        }

        $seeders = require $seedersFile;

        if (!isset($seeders[$modelName])) {
            exit("No seeder registered for model '$modelName'.\n");
        }

        $seeder = $seeders[$modelName];

        // Require factory file
        require_once $seeder['file'];

        // Check classes
        if (!class_exists($seeder['class'])) {
            exit("Factory class {$seeder['class']} not found.\n");
        }

        if (!class_exists($seeder['model'])) {
            exit("Model class {$seeder['model']} not found.\n");
        }

        // Seed
        for ($i = 0; $i < $count; $i++) {
            $data = $seeder['class']::make();
            $seeder['model']::create($data);
        }

        echo "Seeded {$count} {$modelName} record(s).\n";
        break;


    case 'migrate':
        echo " Running all migrations...\n";

        // Load environment variables
        $dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
        $dotenv->safeLoad();

        // Load DB config
        $dbConfig = require __DIR__ . '/config/database.php';

        // Initialize Eloquent Capsule with explicit paths
        $capsule = new \Illuminate\Database\Capsule\Manager;

        // For SQLite connections, ensure database file exists
        if ($dbConfig['default'] === 'sqlite') {
            $databasePath = __DIR__ . "/database/database.sqlite";
            if (!file_exists($databasePath)) {
                touch($databasePath);
                chmod($databasePath, 0755);
            }
        }

        $capsule->addConnection($dbConfig['connections'][$dbConfig['default']]);
        $capsule->setAsGlobal();
        $capsule->bootEloquent();

        // Get all migration files
        $migrations = glob(__DIR__ . '/database/migrations/*.php');
        if (!$migrations) {
            echo " No migration files found.\n";
            break;
        }

        // Sort migrations by filename
        sort($migrations);

        foreach ($migrations as $file) {
            $filename = basename($file, '.php');
            echo " - $filename\n";

            // Convert filename to class name
            $className = str_replace(
                ' ',
                '',
                ucwords(
                    str_replace(
                        '_',
                        ' ',
                        substr($filename, 18) // Remove timestamp
                    )
                )
            );

            require_once $file;

            if (!class_exists($className)) {
                echo "   >> Skipped: Class $className not found in file $filename\n";
                continue;
            }

            try {
                $migration = new $className();
                $migration->up();
                echo "   >> Migrated: $className\n";
            } catch (\Throwable $e) {
                $message = $e->getMessage();
                if (
                    str_contains($message, 'already exists') ||
                    str_contains($message, 'SQLSTATE[42S01]')
                ) {
                    echo "   >> Skipped: Table already exists\n";
                } else {
                    echo "   ** Error: {$e->getMessage()}\n";
                    echo "      File: {$e->getFile()}:{$e->getLine()}\n";
                }
            }
        }

        echo " Migrations complete.\n";
        break;

    default:
        echo <<<EOL
Slim Site CLI
-------------------------
Usage:
  make:page {name}       Create a new route and Twig page
  remove:page {name}     Delete route and Twig file
  make:partial {name}    Create a Twig partial in templates/partials
  make:controller {name} Create a controller class in app/Controllers
  make:model {name}      Create a model class in app/Models
  make:migration {name}  Create a migration file in database/migrations
  serve                  Start local dev server (localhost:8000)

EOL;
        break;
}
